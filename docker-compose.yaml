name: miabox-server

services:
  postgres:
    container_name: postgres-db
    image: postgres:15.3-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - shared-data:/shared
    restart: unless-stopped
    networks:
      - network-bridge

  auth:
    container_name: auth-service
    build: ./auth
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"  
    volumes:
      - shared-data:/shared
    restart: unless-stopped
    networks:
      - network-bridge
    depends_on:
      postgres:
        condition: service_healthy

  api:
    container_name: api-service
    build: ./api
    ports:
      - "${API_PORT}:${API_PORT}"
    restart: unless-stopped
    networks:
      - network-bridge
    volumes:
      - shared-data:/shared
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${API_PORT}/user/config" ]
      interval: 2s
      timeout: 10s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy

  whisper:
    container_name: whisper-service
    build: ./whisper
    ports:
      - "${WHISPER_PORT}:${WHISPER_PORT}"
    restart: unless-stopped
    networks:
      - network-bridge
    volumes:
      - shared-data:/shared
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${WHISPER_PORT}/transcription/config" ]
      interval: 2s
      timeout: 10s
      retries: 5
    depends_on:
      rabbitmq:
        condition: service_healthy

  minio:
    container_name: minio-storage
    image: minio/minio
    ports:
      - "${MINIO_API_PORT}:${MINIO_API_PORT}"
      - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server --console-address ":${MINIO_CONSOLE_PORT}" /data
    networks:
      - network-bridge
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${MINIO_API_PORT}/minio/health/live" ]
      interval: 2s
      timeout: 10s
      retries: 5
    volumes:
      - minio-data:/data:z
      - shared-data:/shared

  rabbitmq:
    container_name: rabbitmq-service
    image: rabbitmq:3-management
    ports:
      - "${REBBITMQ_PORT}:${REBBITMQ_PORT}"
      - "${REBBITMQ_ADMINPANEL_PORT}:${REBBITMQ_ADMINPANEL_PORT}"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - network-bridge
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres-data:
  shared-data:
  minio-data:
  rabbitmq-data:

networks:
  network-bridge:
    driver: bridge
