name: miabox-server

x-postgres-config: &postgres-config
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_PORT: ${POSTGRES_PORT}
  POSTGRES_DB: ${POSTGRES_DB}

services:
  nginx:
    container_name: nginx-service
    image: nginx:latest
    volumes:
      - ./nginx/logs:/var/log/nginx
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/res:/usr/share/nginx/html
    ports:
      - "${NGINX_OUTER_PORT}:${NGINX_INNER_PORT}"
    environment:
      NGINX_INNER_PORT: ${NGINX_INNER_PORT}
      CORE_PORT: ${CORE_PORT}
      AUTH_PORT: ${AUTH_PORT}
      KNOWLEDGEBASE_PORT: ${KNOWLEDGEBASE_PORT}
    networks:
      - network-bridge
    depends_on:
      - core
      - auth
      - knowledgebase
 
  postgres:
    container_name: postgres-db
    image: postgres:15.3-alpine
    environment:
      <<: *postgres-config
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - shared-data:/shared
    restart: unless-stopped
    networks:
      - network-bridge

  auth:
    container_name: auth-service
    build: 
      context: ./auth
      args:
        <<: *postgres-config
        AUTH_PORT: ${AUTH_PORT}
        LOG_LEVEL: ${LOG_LEVEL}
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    volumes:
      - shared-data:/shared
    restart: unless-stopped
    networks:
      - network-bridge
    depends_on:
      postgres:
        condition: service_healthy

  core:
    container_name: core-service
    build: 
      context: ./core
      args:
        CORE_PORT: ${CORE_PORT}
    environment:
      <<: *postgres-config
      AUTH_PORT: ${AUTH_PORT}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      MINIO_API_PORT: ${MINIO_API_PORT}
      MINIO_API_IP: ${MINIO_API_IP}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      WHISPER_PORT: ${WHISPER_PORT}
      LOG_LEVEL: ${LOG_LEVEL}
    ports:
      - "${CORE_PORT}:${CORE_PORT}"
    restart: unless-stopped
    networks:
      - network-bridge
    volumes:
      - shared-data:/shared
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${CORE_PORT}/config" ]
      interval: 2s
      timeout: 10s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy

  whisper:
    container_name: whisper-service
    build: 
      context: ./whisper
      args:
        WHISPER_PORT: ${WHISPER_PORT}
    ports:
      - "${WHISPER_PORT}:${WHISPER_PORT}"
    restart: unless-stopped
    networks:
      - network-bridge
    environment:
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      MINIO_API_PORT: ${MINIO_API_PORT}
      MINIO_API_IP: ${MINIO_API_IP}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      CORE_PORT: ${CORE_PORT}
      MODEL: ${MODEL}
      LOG_LEVEL: ${LOG_LEVEL}
    volumes:
      - shared-data:/shared
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${WHISPER_PORT}/transcription/config" ]
      interval: 2s
      timeout: 10s
      retries: 5
    depends_on:
      rabbitmq:
        condition: service_healthy
  
  knowledgebase:
    container_name: knowledgebase-service
    build: 
      context: ./knowledgebase
      args:
        KNOWLEDGEBASE_PORT: ${KNOWLEDGEBASE_PORT}
        LOG_LEVEL: ${LOG_LEVEL}
    ports:
      - "${KNOWLEDGEBASE_PORT}:${KNOWLEDGEBASE_PORT}"
    restart: unless-stopped
    environment:
      MINIO_API_PORT: ${MINIO_API_PORT}
      MINIO_API_IP: ${MINIO_API_IP}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    networks:
      - network-bridge
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${KNOWLEDGEBASE_PORT}/test" ]
      interval: 2s
      timeout: 10s
      retries: 5

  # minio:
  #   container_name: minio-storage
  #   image: minio/minio
  #   ports:
  #     - "${MINIO_API_PORT}:${MINIO_API_PORT}"
  #     - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}"
  #   environment:
  #     MINIO_ROOT_USER: ${MINIO_ROOT_USER}
  #     MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
  #   command: server --console-address ":${MINIO_CONSOLE_PORT}" /data
  #   networks:
  #     - network-bridge
  #   restart: unless-stopped
  #   healthcheck:
  #     test: [ "CMD", "curl", "-f", "http://localhost:${MINIO_API_PORT}/minio/health/live" ]
  #     interval: 2s
  #     timeout: 10s
  #     retries: 5
  #   volumes:
  #     - minio-data:/data:z
  #     - shared-data:/shared

  rabbitmq:
    container_name: rabbitmq-service
    image: rabbitmq:3-management
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
      - "${RABBITMQ_ADMINPANEL_PORT}:${RABBITMQ_ADMINPANEL_PORT}"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - network-bridge
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres-data:
  shared-data:
  # minio-data:
  rabbitmq-data:

networks:
  network-bridge:
    driver: bridge
